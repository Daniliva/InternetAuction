// <auto-generated />
using System;
using InternetAuction.DAL.MSSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InternetAuction.DAL.MSSQL.Migrations
{
    [DbContext(typeof(MsSqlContext))]
    [Migration("20220713093443_CorrectNameing1")]
    partial class CorrectNameing1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.Autction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Autctions");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.AutctionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DescriptionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AutctionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescriptionStatus = "Auction is started",
                            NameStatus = "Start"
                        },
                        new
                        {
                            Id = 2,
                            DescriptionStatus = "Auction is finished",
                            NameStatus = "Finish"
                        },
                        new
                        {
                            Id = 3,
                            DescriptionStatus = "Auction isn't started",
                            NameStatus = "Is not started"
                        });
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.Bidding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AutctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AutctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Biddings");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.ImageId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ImageeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.HasIndex("UserId");

                    b.ToTable("ImageIds");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AutctionRef")
                        .HasColumnType("int");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostMin")
                        .HasColumnType("decimal");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhotoCurrentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutctionRef")
                        .IsUnique();

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PhotoCurrentId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.LotCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DescriptionCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LotCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescriptionCategory = "The arts are a very wide range of human practices of creative expression, storytelling and cultural participation. They encompass multiple diverse and plural modes of thinking, doing and being, in an extremely broad range of media. Both highly dynamic and a characteristically constant feature of human life, they have developed into innovative, stylized and sometimes intricate forms.",
                            NameCategory = "Arts"
                        },
                        new
                        {
                            Id = 2,
                            DescriptionCategory = "A book is a medium for recording information in the form of writing or images, typically composed of many pages (made of papyrus, parchment, vellum, or paper) bound together and protected by a cover.[1] The technical term for this physical arrangement is codex (plural, codices). In the history of hand-held physical supports for extended written compositions or records, the codex replaces its predecessor, the scroll. A single sheet in a codex is a leaf and each side of a leaf is a page.",
                            NameCategory = "Books"
                        },
                        new
                        {
                            Id = 3,
                            DescriptionCategory = "A true antique (Latin: antiquus; 'old', 'ancient') is an item perceived as having value because of its aesthetic or historical significance, and often defined as at least 100 years old (or some other limit), although the term is often used loosely to describe any object that is old.[1] An antique is usually an item that is collected or desirable because of its age, beauty, rarity, condition, utility, personal emotional connection, and/or other unique features. It is an object that represents a previous era or time period in human history. Vintage and collectible are used to describe items that are old, but do not meet the 100-year criterion.",
                            NameCategory = "Antiques"
                        });
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Customer"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Owner"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.RoleUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AvatarCurrentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarCurrentId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.Autction", b =>
                {
                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.AutctionStatus", "Status")
                        .WithMany("Autctions")
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.Bidding", b =>
                {
                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.Autction", "Autction")
                        .WithMany("Biddings")
                        .HasForeignKey("AutctionId");

                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.User", "User")
                        .WithMany("Biddings")
                        .HasForeignKey("UserId");

                    b.Navigation("Autction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.ImageId", b =>
                {
                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.Lot", null)
                        .WithMany("Photos")
                        .HasForeignKey("LotId");

                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.User", null)
                        .WithMany("Avatars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.Lot", b =>
                {
                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.Autction", "Autction")
                        .WithOne("Lot")
                        .HasForeignKey("InternetAuction.DAL.Entities.MSSQL.Lot", "AutctionRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.User", "Author")
                        .WithMany("Lots")
                        .HasForeignKey("AuthorId");

                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.LotCategory", "Category")
                        .WithMany("Lots")
                        .HasForeignKey("CategoryId");

                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.ImageId", "PhotoCurrent")
                        .WithMany()
                        .HasForeignKey("PhotoCurrentId");

                    b.Navigation("Autction");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("PhotoCurrent");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.RoleUser", b =>
                {
                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.User", b =>
                {
                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.ImageId", "AvatarCurrent")
                        .WithMany()
                        .HasForeignKey("AvatarCurrentId");

                    b.Navigation("AvatarCurrent");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InternetAuction.DAL.Entities.MSSQL.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.Autction", b =>
                {
                    b.Navigation("Biddings");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.AutctionStatus", b =>
                {
                    b.Navigation("Autctions");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.Lot", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.LotCategory", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("InternetAuction.DAL.Entities.MSSQL.User", b =>
                {
                    b.Navigation("Avatars");

                    b.Navigation("Biddings");

                    b.Navigation("Lots");
                });
#pragma warning restore 612, 618
        }
    }
}
